
#include <iostream>
#include <typeinfo>
#ifdef _MSC_VER
	#include <windows.h>
	#include <sys/stat.h>
#endif

#ifdef BUILD_PLATFORM_LINUX
	#include <unistd.h>
#endif


void VALUE()
{
	std::cout << "\n";
}

template <class T>
void VALUE(const T& v)
{
	std::cout << " == `" << v << "`\n";
}

template <class T>
void _typedef()
{
	std::cout << " == `" << typeid(T).name() << "`\n";
}

#define KEY(k) std::cout << k;
#define TAGS(t) std::cout << "\t[" << t << "]\n";

#define TYPEDEF(T) _typedef<T>()


int main()
{
	std::cout << "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";

	#include "autogenerated_defines.h"

	std::cout << "----------------------------------------------------------------\n";

	return 0;
}



